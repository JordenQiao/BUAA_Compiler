const int _GLOBAL_MAX_NUM 128 
function int factorial  
para int n  
+ 0 n $0 
cmp $0 <= 1 
BZ label_0   
return 1 factorial  
label label_0   
use factorial   
+ 0 n $1 
- $1 1 $2 
push $2   
call factorial   
* n RET $3 
+ 0 $3 $4 
return $4 factorial  
function int mod  
para int x  
para int y  
+ 0 x $5 
/ x y $6 
* $6 y $7 
- $5 $7 $8 
= x $8  
return x mod  
function void swap  
para int x  
para int y  
var int temp  
printf 0 int x 
printf  char '\n' 
printf 1 int y 
printf  char '\n' 
= temp x  
= x y  
= y temp  
printf 2 int x 
printf  char '\n' 
printf 3 int y 
printf  char '\n' 
return  swap  
function int full_num  
para int n  
para int j  
para int a  
* n 100 $9 
+ 0 $9 $10 
* j 10 $11 
+ $10 $11 $12 
+ $12 a $13 
return $13 full_num  
function int flower_num  
para int n  
para int j  
para int a  
* n n $14 
* $14 n $15 
+ 0 $15 $16 
* j j $17 
* $17 j $18 
+ $16 $18 $19 
* a a $20 
* $20 a $21 
+ $19 $21 $22 
return $22 flower_num  
function void complete_flower_num  
var int k[128]  
var int i  
var int j  
var int n  
var int s  
var int x1  
var int y  
var int m  
var int k2  
var int h  
var int leap  
var int x2  
var int a  
var int b  
var int c  
= j 2  
label label_2   
+ 0 j $23 
cmp $23 < 128 
BZ label_3   
= n -1  
= s j  
= i 1  
label label_4   
+ 0 i $25 
cmp $25 < j 
BZ label_5   
/ j i $26 
+ 0 $26 $27 
* $27 i $28 
+ 0 $28 $29 
= x1 $29  
use mod   
push j   
push i   
call mod   
+ 0 RET $30 
cmp $30 == 0 
BZ label_6   
+ 0 n $31 
+ $31 1 $32 
= n $32  
+ 0 s $33 
- $33 i $34 
= s $34  
+ 0 n $35 
cmp $35 >= 128 
BZ label_8   
printf 4 int  
printf  char '\n' 
GOTO label_9   
label label_8   
[]= n i k 
label label_9   
label label_6   
+ i 1 i 
GOTO label_4   
label label_5   
+ 0 s $36 
cmp $36 == 0 
BZ label_10   
printf 5 int j 
printf  char '\n' 
= i 0  
label label_12   
+ 0 i $37 
cmp $37 <= n 
BZ label_13   
[] k i $38 
+ 0 $38 $39 
printf 6 int $39 
printf  char '\n' 
+ i 1 i 
GOTO label_12   
label label_13   
printf 7 int  
printf  char '\n' 
label label_10   
+ j 1 j 
GOTO label_2   
label label_3   
printf 8 int  
printf  char '\n' 
printf 9 int  
printf  char '\n' 
= y 0  
= i 100  
label label_14   
+ 0 i $40 
cmp $40 < 228 
BZ label_15   
/ i 100 $43 
+ 0 $43 $44 
= n $44  
use mod   
/ i 10 $45 
+ 0 $45 $46 
push $46   
push 10   
call mod   
+ 0 RET $47 
= j $47  
use mod   
push i   
push 10   
call mod   
+ 0 RET $48 
= a $48  
use full_num   
push n   
push j   
push a   
call full_num   
+ 0 RET $49 
use flower_num   
push n   
push j   
push a   
call flower_num   
+ 0 RET $50 
cmp $49 == $50 
BZ label_16   
[]= y i k 
+ 0 y $51 
+ $51 1 $52 
= y $52  
label label_16   
+ i 1 i 
GOTO label_14   
label label_15   
= i 0  
label label_18   
+ 0 i $53 
cmp $53 < y 
BZ label_19   
[] k i $54 
+ 0 $54 $55 
printf 10 int $55 
printf  char '\n' 
+ i 1 i 
GOTO label_18   
label label_19   
printf 11 int  
printf  char '\n' 
printf 12 int  
printf  char '\n' 
= h 0  
= leap 1  
= m 2  
label label_20   
+ 0 m $56 
cmp $56 <= 128 
BZ label_21   
/ m 2 $57 
+ 0 $57 $58 
= k2 $58  
= i 2  
label label_22   
+ 0 i $59 
cmp $59 <= k2 
BZ label_23   
/ m i $60 
+ 0 $60 $61 
* $61 i $62 
+ 0 $62 $63 
= x2 $63  
use mod   
push m   
push i   
call mod   
+ 0 RET $64 
cmp $64 == 0 
BZ label_24   
= leap 0  
label label_24   
+ i 1 i 
GOTO label_22   
label label_23   
+ 0 leap $65 
cmp $65 == 1 
BZ label_26   
printf 13 int m 
printf  char '\n' 
+ 0 h $66 
+ $66 1 $67 
= h $67  
/ h 10 $68 
+ 0 $68 $69 
* $69 10 $70 
+ 0 $70 $71 
= x2 $71  
+ 0 x2 $72 
cmp $72 == h 
BZ label_28   
printf 14 int  
printf  char '\n' 
label label_28   
label label_26   
= leap 1  
+ m 1 m 
GOTO label_20   
label label_21   
printf 15 int h 
printf  char '\n' 
return  complete_flower_num  
function void main  
var int n  
use factorial   
push 5   
call factorial   
+ 0 RET $73 
= n $73  
printf 16 int n 
printf  char '\n' 
use swap   
push 5   
push 10   
call swap   
use complete_flower_num   
call complete_flower_num   
end    
